<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Wang Zhiwei</title><link>https://zhiweio.github.io/posts/</link><description>Recent content in Posts on Wang Zhiwei</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Wang Zhiwei</copyright><lastBuildDate>Tue, 25 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://zhiweio.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>BoostPost - Data Class 最佳（误）实践</title><link>https://zhiweio.github.io/posts/dataclass-in-boostpost/</link><pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate><guid>https://zhiweio.github.io/posts/dataclass-in-boostpost/</guid><description>前言 前一篇博客介绍了在数据处理工作中引入 Data Class 概念，当时的实现很不完善，只是灵机一动下花了半小时便写出了一个粗糙的原型库，在后续的工作中，我切合实际的需求场景为此进行了扩展和优化。现在，BoostPost 已经是一个能够帮助解决处理数据时大部分对比更新工作的较为完善的库了。
这里另起篇章深入介绍 BoostPost 的设计灵感和具体实现，以及在特定场景下数据处理工作中带来的效率提升。
正文 数据处理场景 有 API 接口定义如下：
URL: /write/update_base Method: POST Request Body: { &amp;#34;t_people&amp;#34;: { &amp;#34;insert&amp;#34;: [ { &amp;#34;body&amp;#34;: { &amp;#34;gender&amp;#34;: &amp;#34;Genderqueer&amp;#34;, &amp;#34;first_name&amp;#34;: &amp;#34;Tamma&amp;#34;, &amp;#34;last_name&amp;#34;: &amp;#34;Gledhall&amp;#34;, &amp;#34;ip_address&amp;#34;: &amp;#34;112.192.229.205&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;tgledhall2@oaic.gov.au&amp;#34; } } ], &amp;#34;update&amp;#34;: [ { &amp;#34;body&amp;#34;: { &amp;#34;email&amp;#34;: &amp;#34;bgraalman1@gmail.com&amp;#34; }, &amp;#34;key&amp;#34;: { &amp;#34;first_name&amp;#34;: &amp;#34;Barr&amp;#34;, &amp;#34;last_name&amp;#34;: &amp;#34;Graalman&amp;#34; } } ], &amp;#34;delete&amp;#34;: [ { &amp;#34;key&amp;#34;: { &amp;#34;first_name&amp;#34;: &amp;#34;Delila&amp;#34;, &amp;#34;last_name&amp;#34;: &amp;#34;Coveny&amp;#34; } } ] } } 需要从新旧两批数据生成以上更新数据格式，输入数据如下：</description></item><item><title>一次改善既有代码的设计</title><link>https://zhiweio.github.io/posts/code-review/</link><pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate><guid>https://zhiweio.github.io/posts/code-review/</guid><description>前言 作为一名数据清洗程序员，平时的主要工作是搬运和规范化数据，在 ETL 中处于 T(Transform) 和 L(Load) 的阶段。在我们的线上业务数据实时更新流程里，对于每张 MySQL 表都要事先对比新旧数据，只提交更新变化的字段，即所谓真实更新，然而因为祖传代码和同事之间开发规范不统一，对于真实更新的处理存在多份不同的实现，导致了大量重复代码和难以维护的问题，我决定封装这一业务逻辑，将其统一和规范化，解决以上暴露出的问题。
正文 设计思考 封装这一业务，需要考虑兼容性和可扩展性，其一要能够兼容所有数据维度（每个维度对应一张表），其二便于用户扩展添加模块的功能，以应对特殊业务处理逻辑需求的场景。以上两点是整个设计过程中必须记住的，否则又会是多了一份重复代码，使原有的问题更严重。
观察业务，处理的数据为 JSON 格式，映射到 Python 里就是一个字典结构，每次更新时都会拿到多条这样的新数据，再与数据库里的旧数据对比去重，并找出每条数据变化了的字段，最后请求 API 接口更新。原有的实现大同小异，都是直接处理 Python 字典数据，去重逻辑为遍历循环作对比，并且衍生了很多不够通用的辅助功能函数，晦涩难懂，不好测试，简直维护地狱。
有个概念叫 数据类， 每一种数据可以封装成一个类，便于对数据做复杂的逻辑处理，此次代码优化也是以此概念为基础，把处理 Python 字典转换成处理数据类，如此一来可以简化工作，这里推荐两篇文章
Data classes - Type Classes Python 工匠：做一个精通规则的玩家 在 3.7 之后的 Python 版本中，有个名为 dataclasses 的模块，它就是数据类在 Python 里的通用模块实现，非常便于处理数据。最开始是 Python3.6 时候的一个第三方库，因为太好用且使用广泛，在 3.7 之后被加入进了标准库里。以下官方文档和原项目的 GitHub 链接，感兴趣可以看下。
原项目地址: https://github.com/ericvsmith/dataclasses 官方文档: https://docs.python.org/3/library/dataclasses.html PEP 557 &amp;ndash; Data Classes PS: 我曾试图把该模块移植到 Python2，不过失败了 :(
失败的实现
实现 因为数据更新都是走接口，所以这里和直接连接数据库更新有所不同，最后更新的数据要构造成接口规范的格式，下面代码里可能会有些具体业务上的细节，这些都是细枝末节，可以忽略，了解大致思路即可。
数据类 首先开始实现一个数据类雏形</description></item><item><title>一碗阳春面</title><link>https://zhiweio.github.io/posts/noodle/</link><pubDate>Fri, 03 May 2019 22:54:42 +0000</pubDate><guid>https://zhiweio.github.io/posts/noodle/</guid><description>&lt;p>十多前的一个午后，我独自在家中，爷爷奶奶外出劳作去了，我感觉有些饿，便煮了一锅番茄 鸡蛋面，然后一小碗接一小碗地盛着，坐在院子门口对着门前的小河慢慢吃掉了一整锅面。&lt;/p></description></item><item><title>苋菜梗</title><link>https://zhiweio.github.io/posts/xiancaigen/</link><pubDate>Tue, 01 Jan 2019 14:02:58 +0000</pubDate><guid>https://zhiweio.github.io/posts/xiancaigen/</guid><description>&lt;p>看纪录片《风味人间》，介绍到宁波风俗&amp;ndash;腌制苋菜梗，想起了幼时。奶奶会把长到粗壮的苋菜洗净切段、抹上盐，放进瓦罐中腌制，在我们扬州也有这样的习惯呐。&lt;/p></description></item><item><title>一首《となりのトトロ》和盐水毛豆</title><link>https://zhiweio.github.io/posts/early-summer/</link><pubDate>Wed, 23 May 2018 22:40:25 +0000</pubDate><guid>https://zhiweio.github.io/posts/early-summer/</guid><description>&lt;p>&lt;a href="http://music.163.com/song/584136/?userid=31155644">《となりのトトロ》&lt;/a>&lt;/p>
&lt;p>这首歌，真的满是夏天的味道，瞬间把我拉到虫鸣蛙声中，回到两只手都捧不下一只饭碗的年纪。&lt;/p></description></item><item><title>平庸之辈</title><link>https://zhiweio.github.io/posts/mediocrity/</link><pubDate>Wed, 15 Nov 2017 10:34:17 +0000</pubDate><guid>https://zhiweio.github.io/posts/mediocrity/</guid><description>假如明天我将要死去，今天要如何度过
依旧患得患失、浑浑噩噩嘛
不要以平庸之躯死去</description></item><item><title>一次 ElasticSearch 宕机事故处理</title><link>https://zhiweio.github.io/posts/es-down-fix/</link><pubDate>Fri, 21 Jul 2017 14:40:34 +0000</pubDate><guid>https://zhiweio.github.io/posts/es-down-fix/</guid><description>&lt;p>早上，当我连上服务器查看昨晚临走时开的数据导入 es 的任务完成度，发现完成到 78% 时挂了&lt;/p>
&lt;p>访问 Kibana 查看 es 状况，red 警报，&lt;code>ps aux | grep elastic&lt;/code> 查看 es 服务的进程，没有相关进程&lt;/p>
&lt;p>执行 &lt;code>systemctl status elasticsearch&lt;/code>，显示 failed
执行 &lt;code>systemctl start elasticsearch&lt;/code> 重新启动 es 服务，启动成功&lt;/p></description></item></channel></rss>